type Service = 
 service {
   categorySearchNewest: (text, opt text) -> (text, opt text) query;
   getPK: () -> (text) query;
   isStatusComplete: () -> (bool) query;
   searchCanisterId: (text, text) -> (text) query;
   searchCategory: (text, opt text) -> (text, opt text) query;
   searchTerm: (text, opt text) -> (text, opt text) query;
   skExists: (text) -> (bool) query;
   transferCycles: () -> ();
   upload: (text) -> ();
 };
type ScalingOptions = 
 record {
   autoScalingHook: AutoScalingCanisterSharedFunctionHook;
   sizeLimit: ScalingLimitType;
 };
type ScalingLimitType = 
 variant {
   count: nat;
   heapSize: nat;
 };
type AutoScalingCanisterSharedFunctionHook = func (text) -> (text);
service : (record {
             owners: opt vec principal;
             partitionKey: text;
             scalingOptions: ScalingOptions;
           }) -> Service
